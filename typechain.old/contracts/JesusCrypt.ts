/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace JesusCrypt {
  export type PairRulesStruct = {
    limited: boolean;
    maxHoldingAmount: BigNumberish;
    minHoldingAmount: BigNumberish;
  };

  export type PairRulesStructOutput = [boolean, BigNumber, BigNumber] & {
    limited: boolean;
    maxHoldingAmount: BigNumber;
    minHoldingAmount: BigNumber;
  };
}

export interface JesusCryptInterface extends utils.Interface {
  functions: {
    "ADIVSORS_MAX_TOKENS()": FunctionFragment;
    "ADVISORS_MAX_PERCENT()": FunctionFragment;
    "CHAINLINK_BNB_USDT()": FunctionFragment;
    "DEVELOPERS_PERCENT()": FunctionFragment;
    "INITIAL_SUPPLY()": FunctionFragment;
    "PRESALE_MAX_PERCENT()": FunctionFragment;
    "USDT_ADDRESS()": FunctionFragment;
    "WBNB_ADDRESS()": FunctionFragment;
    "addLiquidity()": FunctionFragment;
    "advisors()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "bnbPoolAddress()": FunctionFragment;
    "burn(address,uint256)": FunctionFragment;
    "buyPresaleTokens()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "getLatestBNBPrice()": FunctionFragment;
    "getRules()": FunctionFragment;
    "getTokenPrice()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause(string,uint256)": FunctionFragment;
    "pauseExpiration()": FunctionFragment;
    "pauseReason()": FunctionFragment;
    "paused()": FunctionFragment;
    "presale()": FunctionFragment;
    "removeRule(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAdvisors(address)": FunctionFragment;
    "setPresale(address,address[])": FunctionFragment;
    "setRule(bool,address,uint256,uint256)": FunctionFragment;
    "startPresale(uint256,address,address)": FunctionFragment;
    "symbol()": FunctionFragment;
    "toDateTime(uint256)": FunctionFragment;
    "tokensLocked()": FunctionFragment;
    "totalLockedTokens()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unlockDate()": FunctionFragment;
    "unpause()": FunctionFragment;
    "usdtPoolAddress()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ADIVSORS_MAX_TOKENS"
      | "ADVISORS_MAX_PERCENT"
      | "CHAINLINK_BNB_USDT"
      | "DEVELOPERS_PERCENT"
      | "INITIAL_SUPPLY"
      | "PRESALE_MAX_PERCENT"
      | "USDT_ADDRESS"
      | "WBNB_ADDRESS"
      | "addLiquidity"
      | "advisors"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "bnbPoolAddress"
      | "burn"
      | "buyPresaleTokens"
      | "decimals"
      | "decreaseAllowance"
      | "getLatestBNBPrice"
      | "getRules"
      | "getTokenPrice"
      | "increaseAllowance"
      | "name"
      | "owner"
      | "pause"
      | "pauseExpiration"
      | "pauseReason"
      | "paused"
      | "presale"
      | "removeRule"
      | "renounceOwnership"
      | "setAdvisors"
      | "setPresale"
      | "setRule"
      | "startPresale"
      | "symbol"
      | "toDateTime"
      | "tokensLocked"
      | "totalLockedTokens"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "unlockDate"
      | "unpause"
      | "usdtPoolAddress"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ADIVSORS_MAX_TOKENS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ADVISORS_MAX_PERCENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CHAINLINK_BNB_USDT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEVELOPERS_PERCENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INITIAL_SUPPLY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRESALE_MAX_PERCENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "USDT_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WBNB_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "advisors", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "bnbPoolAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyPresaleTokens",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestBNBPrice",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getRules", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTokenPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pause",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pauseExpiration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pauseReason",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "presale", values?: undefined): string;
  encodeFunctionData(functionFragment: "removeRule", values: [string]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setAdvisors", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setPresale",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setRule",
    values: [boolean, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startPresale",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "toDateTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensLocked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalLockedTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockDate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "usdtPoolAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "ADIVSORS_MAX_TOKENS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ADVISORS_MAX_PERCENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CHAINLINK_BNB_USDT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEVELOPERS_PERCENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INITIAL_SUPPLY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PRESALE_MAX_PERCENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "USDT_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WBNB_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "advisors", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bnbPoolAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyPresaleTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestBNBPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRules", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauseExpiration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pauseReason",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "presale", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "removeRule", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAdvisors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPresale", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRule", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startPresale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toDateTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokensLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalLockedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlockDate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "usdtPoolAddress",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "PresaleStarted(uint256,uint256,uint256)": EventFragment;
    "TokensPurchasedPresale(address,uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PresaleStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensPurchasedPresale"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface PresaleStartedEventObject {
  currentRound: BigNumber;
  endTime: BigNumber;
  remainingTokens: BigNumber;
}
export type PresaleStartedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  PresaleStartedEventObject
>;

export type PresaleStartedEventFilter = TypedEventFilter<PresaleStartedEvent>;

export interface TokensPurchasedPresaleEventObject {
  purchaser: string;
  amountBNB: BigNumber;
  amountTokens: BigNumber;
}
export type TokensPurchasedPresaleEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  TokensPurchasedPresaleEventObject
>;

export type TokensPurchasedPresaleEventFilter =
  TypedEventFilter<TokensPurchasedPresaleEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface JesusCrypt extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: JesusCryptInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ADIVSORS_MAX_TOKENS(overrides?: CallOverrides): Promise<[BigNumber]>;

    ADVISORS_MAX_PERCENT(overrides?: CallOverrides): Promise<[BigNumber]>;

    CHAINLINK_BNB_USDT(overrides?: CallOverrides): Promise<[string]>;

    DEVELOPERS_PERCENT(overrides?: CallOverrides): Promise<[BigNumber]>;

    INITIAL_SUPPLY(overrides?: CallOverrides): Promise<[BigNumber]>;

    PRESALE_MAX_PERCENT(overrides?: CallOverrides): Promise<[BigNumber]>;

    USDT_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    WBNB_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    addLiquidity(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    advisors(overrides?: CallOverrides): Promise<[string]>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    bnbPoolAddress(overrides?: CallOverrides): Promise<[string]>;

    burn(
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    buyPresaleTokens(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getLatestBNBPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRules(
      overrides?: CallOverrides
    ): Promise<[JesusCrypt.PairRulesStructOutput[]]>;

    getTokenPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      _reason: string,
      _pauseExpiration: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    pauseExpiration(overrides?: CallOverrides): Promise<[BigNumber]>;

    pauseReason(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    presale(overrides?: CallOverrides): Promise<[string]>;

    removeRule(
      _pancakeSwapPair: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setAdvisors(
      _jesusCryptAdvisors: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setPresale(
      _presale: string,
      _developers: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setRule(
      _limited: boolean,
      _pancakeSwapPair: string,
      _maxHoldingAmount: BigNumberish,
      _minHoldingAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    startPresale(
      _duration: BigNumberish,
      _pancakeSwapPairBNB: string,
      _pancakeSwapPairUSDT: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    toDateTime(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    tokensLocked(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalLockedTokens(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unlockDate(overrides?: CallOverrides): Promise<[BigNumber]>;

    unpause(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    usdtPoolAddress(overrides?: CallOverrides): Promise<[string]>;
  };

  ADIVSORS_MAX_TOKENS(overrides?: CallOverrides): Promise<BigNumber>;

  ADVISORS_MAX_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

  CHAINLINK_BNB_USDT(overrides?: CallOverrides): Promise<string>;

  DEVELOPERS_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

  INITIAL_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

  PRESALE_MAX_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

  USDT_ADDRESS(overrides?: CallOverrides): Promise<string>;

  WBNB_ADDRESS(overrides?: CallOverrides): Promise<string>;

  addLiquidity(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  advisors(overrides?: CallOverrides): Promise<string>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  bnbPoolAddress(overrides?: CallOverrides): Promise<string>;

  burn(
    _account: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  buyPresaleTokens(
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getLatestBNBPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getRules(
    overrides?: CallOverrides
  ): Promise<JesusCrypt.PairRulesStructOutput[]>;

  getTokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    _reason: string,
    _pauseExpiration: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  pauseExpiration(overrides?: CallOverrides): Promise<BigNumber>;

  pauseReason(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  presale(overrides?: CallOverrides): Promise<string>;

  removeRule(
    _pancakeSwapPair: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setAdvisors(
    _jesusCryptAdvisors: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setPresale(
    _presale: string,
    _developers: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setRule(
    _limited: boolean,
    _pancakeSwapPair: string,
    _maxHoldingAmount: BigNumberish,
    _minHoldingAmount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  startPresale(
    _duration: BigNumberish,
    _pancakeSwapPairBNB: string,
    _pancakeSwapPairUSDT: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  toDateTime(
    _timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  tokensLocked(overrides?: CallOverrides): Promise<BigNumber>;

  totalLockedTokens(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unlockDate(overrides?: CallOverrides): Promise<BigNumber>;

  unpause(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  usdtPoolAddress(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    ADIVSORS_MAX_TOKENS(overrides?: CallOverrides): Promise<BigNumber>;

    ADVISORS_MAX_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    CHAINLINK_BNB_USDT(overrides?: CallOverrides): Promise<string>;

    DEVELOPERS_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    INITIAL_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    PRESALE_MAX_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    USDT_ADDRESS(overrides?: CallOverrides): Promise<string>;

    WBNB_ADDRESS(overrides?: CallOverrides): Promise<string>;

    addLiquidity(overrides?: CallOverrides): Promise<void>;

    advisors(overrides?: CallOverrides): Promise<string>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    bnbPoolAddress(overrides?: CallOverrides): Promise<string>;

    burn(
      _account: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    buyPresaleTokens(overrides?: CallOverrides): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getLatestBNBPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getRules(
      overrides?: CallOverrides
    ): Promise<JesusCrypt.PairRulesStructOutput[]>;

    getTokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(
      _reason: string,
      _pauseExpiration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    pauseExpiration(overrides?: CallOverrides): Promise<BigNumber>;

    pauseReason(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    presale(overrides?: CallOverrides): Promise<string>;

    removeRule(
      _pancakeSwapPair: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAdvisors(
      _jesusCryptAdvisors: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPresale(
      _presale: string,
      _developers: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    setRule(
      _limited: boolean,
      _pancakeSwapPair: string,
      _maxHoldingAmount: BigNumberish,
      _minHoldingAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    startPresale(
      _duration: BigNumberish,
      _pancakeSwapPairBNB: string,
      _pancakeSwapPairUSDT: string,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    toDateTime(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    tokensLocked(overrides?: CallOverrides): Promise<BigNumber>;

    totalLockedTokens(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unlockDate(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(overrides?: CallOverrides): Promise<void>;

    usdtPoolAddress(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "PresaleStarted(uint256,uint256,uint256)"(
      currentRound?: null,
      endTime?: null,
      remainingTokens?: null
    ): PresaleStartedEventFilter;
    PresaleStarted(
      currentRound?: null,
      endTime?: null,
      remainingTokens?: null
    ): PresaleStartedEventFilter;

    "TokensPurchasedPresale(address,uint256,uint256)"(
      purchaser?: string | null,
      amountBNB?: null,
      amountTokens?: null
    ): TokensPurchasedPresaleEventFilter;
    TokensPurchasedPresale(
      purchaser?: string | null,
      amountBNB?: null,
      amountTokens?: null
    ): TokensPurchasedPresaleEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    ADIVSORS_MAX_TOKENS(overrides?: CallOverrides): Promise<BigNumber>;

    ADVISORS_MAX_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    CHAINLINK_BNB_USDT(overrides?: CallOverrides): Promise<BigNumber>;

    DEVELOPERS_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    INITIAL_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    PRESALE_MAX_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    USDT_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    WBNB_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    addLiquidity(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    advisors(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    bnbPoolAddress(overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    buyPresaleTokens(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getLatestBNBPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getRules(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      _reason: string,
      _pauseExpiration: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    pauseExpiration(overrides?: CallOverrides): Promise<BigNumber>;

    pauseReason(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    presale(overrides?: CallOverrides): Promise<BigNumber>;

    removeRule(
      _pancakeSwapPair: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setAdvisors(
      _jesusCryptAdvisors: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setPresale(
      _presale: string,
      _developers: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setRule(
      _limited: boolean,
      _pancakeSwapPair: string,
      _maxHoldingAmount: BigNumberish,
      _minHoldingAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    startPresale(
      _duration: BigNumberish,
      _pancakeSwapPairBNB: string,
      _pancakeSwapPairUSDT: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    toDateTime(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokensLocked(overrides?: CallOverrides): Promise<BigNumber>;

    totalLockedTokens(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unlockDate(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    usdtPoolAddress(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ADIVSORS_MAX_TOKENS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ADVISORS_MAX_PERCENT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CHAINLINK_BNB_USDT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DEVELOPERS_PERCENT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    INITIAL_SUPPLY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRESALE_MAX_PERCENT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    USDT_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WBNB_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addLiquidity(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    advisors(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bnbPoolAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burn(
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    buyPresaleTokens(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getLatestBNBPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRules(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokenPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      _reason: string,
      _pauseExpiration: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    pauseExpiration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pauseReason(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    presale(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeRule(
      _pancakeSwapPair: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setAdvisors(
      _jesusCryptAdvisors: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setPresale(
      _presale: string,
      _developers: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setRule(
      _limited: boolean,
      _pancakeSwapPair: string,
      _maxHoldingAmount: BigNumberish,
      _minHoldingAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    startPresale(
      _duration: BigNumberish,
      _pancakeSwapPairBNB: string,
      _pancakeSwapPairUSDT: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    toDateTime(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokensLocked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalLockedTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unlockDate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    usdtPoolAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
