/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace JesusCryptPresale {
  export type PresaleRoundStruct = {
    rateUSDT: BigNumberish;
    endTime: BigNumberish;
  };

  export type PresaleRoundStructOutput = [BigNumber, BigNumber] & {
    rateUSDT: BigNumber;
    endTime: BigNumber;
  };
}

export interface JesusCryptPresaleInterface extends utils.Interface {
  functions: {
    "CHAINLINK_BNB_USDT()": FunctionFragment;
    "START_JSCP_PRICE()": FunctionFragment;
    "USDT_ADDRESS()": FunctionFragment;
    "WBNB_ADDRESS()": FunctionFragment;
    "addHolder(address,uint256)": FunctionFragment;
    "addLiquidity()": FunctionFragment;
    "allPresaleRoundsEnded()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "buyPresaleTokens()": FunctionFragment;
    "canPresaleHolderTransfer(address,uint256)": FunctionFragment;
    "currentRound()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "getLatestBNBPrice()": FunctionFragment;
    "getPresaleRound()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "isPresaleActive()": FunctionFragment;
    "isPresaleHolder(address)": FunctionFragment;
    "jesusCryptToken()": FunctionFragment;
    "liquidityLocker()": FunctionFragment;
    "lockedBNB()": FunctionFragment;
    "lockedUSDT()": FunctionFragment;
    "maxAmount()": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "pancakeSwapPairBNB()": FunctionFragment;
    "pancakeSwapPairUSDT()": FunctionFragment;
    "positionManager()": FunctionFragment;
    "presaleHolders(address)": FunctionFragment;
    "presaleHoldersList(uint256)": FunctionFragment;
    "presaleRounds(uint256)": FunctionFragment;
    "presaleStartTime()": FunctionFragment;
    "remainingAmount()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAmounts(uint256,uint256)": FunctionFragment;
    "setLiquidityLocker(address)": FunctionFragment;
    "setPancakeSwapPositionManager(address)": FunctionFragment;
    "startPresale(uint256,address,address)": FunctionFragment;
    "symbol()": FunctionFragment;
    "toDateTime(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "CHAINLINK_BNB_USDT"
      | "START_JSCP_PRICE"
      | "USDT_ADDRESS"
      | "WBNB_ADDRESS"
      | "addHolder"
      | "addLiquidity"
      | "allPresaleRoundsEnded"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "buyPresaleTokens"
      | "canPresaleHolderTransfer"
      | "currentRound"
      | "decimals"
      | "decreaseAllowance"
      | "getLatestBNBPrice"
      | "getPresaleRound"
      | "increaseAllowance"
      | "isPresaleActive"
      | "isPresaleHolder"
      | "jesusCryptToken"
      | "liquidityLocker"
      | "lockedBNB"
      | "lockedUSDT"
      | "maxAmount"
      | "name"
      | "owner"
      | "pancakeSwapPairBNB"
      | "pancakeSwapPairUSDT"
      | "positionManager"
      | "presaleHolders"
      | "presaleHoldersList"
      | "presaleRounds"
      | "presaleStartTime"
      | "remainingAmount"
      | "renounceOwnership"
      | "setAmounts"
      | "setLiquidityLocker"
      | "setPancakeSwapPositionManager"
      | "startPresale"
      | "symbol"
      | "toDateTime"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "CHAINLINK_BNB_USDT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "START_JSCP_PRICE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "USDT_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WBNB_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addHolder",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allPresaleRoundsEnded",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "buyPresaleTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "canPresaleHolderTransfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentRound",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestBNBPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPresaleRound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isPresaleActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isPresaleHolder",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "jesusCryptToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityLocker",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lockedBNB", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lockedUSDT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxAmount", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pancakeSwapPairBNB",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pancakeSwapPairUSDT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "positionManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "presaleHolders",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "presaleHoldersList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "presaleRounds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "presaleStartTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "remainingAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAmounts",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidityLocker",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPancakeSwapPositionManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "startPresale",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "toDateTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "CHAINLINK_BNB_USDT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "START_JSCP_PRICE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "USDT_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WBNB_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addHolder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allPresaleRoundsEnded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyPresaleTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canPresaleHolderTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestBNBPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPresaleRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPresaleActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPresaleHolder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "jesusCryptToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityLocker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockedBNB", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockedUSDT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxAmount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pancakeSwapPairBNB",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pancakeSwapPairUSDT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "positionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "presaleHolders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "presaleHoldersList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "presaleRounds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "presaleStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remainingAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAmounts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidityLocker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPancakeSwapPositionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startPresale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toDateTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface JesusCryptPresale extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: JesusCryptPresaleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CHAINLINK_BNB_USDT(overrides?: CallOverrides): Promise<[string]>;

    START_JSCP_PRICE(overrides?: CallOverrides): Promise<[BigNumber]>;

    USDT_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    WBNB_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    addHolder(
      _holder: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    addLiquidity(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    allPresaleRoundsEnded(overrides?: CallOverrides): Promise<[boolean]>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    buyPresaleTokens(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    canPresaleHolderTransfer(
      _holder: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    currentRound(overrides?: CallOverrides): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getLatestBNBPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPresaleRound(
      overrides?: CallOverrides
    ): Promise<[JesusCryptPresale.PresaleRoundStructOutput]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isPresaleActive(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isPresaleHolder(
      _holder: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    jesusCryptToken(overrides?: CallOverrides): Promise<[string]>;

    liquidityLocker(overrides?: CallOverrides): Promise<[string]>;

    lockedBNB(overrides?: CallOverrides): Promise<[BigNumber]>;

    lockedUSDT(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pancakeSwapPairBNB(overrides?: CallOverrides): Promise<[string]>;

    pancakeSwapPairUSDT(overrides?: CallOverrides): Promise<[string]>;

    positionManager(overrides?: CallOverrides): Promise<[string]>;

    presaleHolders(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        totalPresaleAmount: BigNumber;
        remainingAmount: BigNumber;
        unlockDate: BigNumber;
      }
    >;

    presaleHoldersList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    presaleRounds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { rateUSDT: BigNumber; endTime: BigNumber }
    >;

    presaleStartTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    remainingAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setAmounts(
      _maxAmount: BigNumberish,
      _remainingAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setLiquidityLocker(
      _liquidityLocker: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setPancakeSwapPositionManager(
      _positionManager: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    startPresale(
      _duration: BigNumberish,
      _pancakeSwapPairBNB: string,
      _pancakeSwapPairUSDT: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    toDateTime(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferFrom(
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  CHAINLINK_BNB_USDT(overrides?: CallOverrides): Promise<string>;

  START_JSCP_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

  USDT_ADDRESS(overrides?: CallOverrides): Promise<string>;

  WBNB_ADDRESS(overrides?: CallOverrides): Promise<string>;

  addHolder(
    _holder: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  addLiquidity(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  allPresaleRoundsEnded(overrides?: CallOverrides): Promise<boolean>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  buyPresaleTokens(
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  canPresaleHolderTransfer(
    _holder: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  currentRound(overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getLatestBNBPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getPresaleRound(
    overrides?: CallOverrides
  ): Promise<JesusCryptPresale.PresaleRoundStructOutput>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isPresaleActive(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isPresaleHolder(_holder: string, overrides?: CallOverrides): Promise<boolean>;

  jesusCryptToken(overrides?: CallOverrides): Promise<string>;

  liquidityLocker(overrides?: CallOverrides): Promise<string>;

  lockedBNB(overrides?: CallOverrides): Promise<BigNumber>;

  lockedUSDT(overrides?: CallOverrides): Promise<BigNumber>;

  maxAmount(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pancakeSwapPairBNB(overrides?: CallOverrides): Promise<string>;

  pancakeSwapPairUSDT(overrides?: CallOverrides): Promise<string>;

  positionManager(overrides?: CallOverrides): Promise<string>;

  presaleHolders(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      totalPresaleAmount: BigNumber;
      remainingAmount: BigNumber;
      unlockDate: BigNumber;
    }
  >;

  presaleHoldersList(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  presaleRounds(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { rateUSDT: BigNumber; endTime: BigNumber }
  >;

  presaleStartTime(overrides?: CallOverrides): Promise<BigNumber>;

  remainingAmount(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setAmounts(
    _maxAmount: BigNumberish,
    _remainingAmount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setLiquidityLocker(
    _liquidityLocker: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setPancakeSwapPositionManager(
    _positionManager: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  startPresale(
    _duration: BigNumberish,
    _pancakeSwapPairBNB: string,
    _pancakeSwapPairUSDT: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  toDateTime(
    _timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    _to: string,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferFrom(
    _sender: string,
    _recipient: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    CHAINLINK_BNB_USDT(overrides?: CallOverrides): Promise<string>;

    START_JSCP_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    USDT_ADDRESS(overrides?: CallOverrides): Promise<string>;

    WBNB_ADDRESS(overrides?: CallOverrides): Promise<string>;

    addHolder(
      _holder: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addLiquidity(overrides?: CallOverrides): Promise<[string, string]>;

    allPresaleRoundsEnded(overrides?: CallOverrides): Promise<boolean>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    buyPresaleTokens(overrides?: CallOverrides): Promise<[boolean, BigNumber]>;

    canPresaleHolderTransfer(
      _holder: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, string]>;

    currentRound(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getLatestBNBPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getPresaleRound(
      overrides?: CallOverrides
    ): Promise<JesusCryptPresale.PresaleRoundStructOutput>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPresaleActive(overrides?: CallOverrides): Promise<boolean>;

    isPresaleHolder(
      _holder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    jesusCryptToken(overrides?: CallOverrides): Promise<string>;

    liquidityLocker(overrides?: CallOverrides): Promise<string>;

    lockedBNB(overrides?: CallOverrides): Promise<BigNumber>;

    lockedUSDT(overrides?: CallOverrides): Promise<BigNumber>;

    maxAmount(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pancakeSwapPairBNB(overrides?: CallOverrides): Promise<string>;

    pancakeSwapPairUSDT(overrides?: CallOverrides): Promise<string>;

    positionManager(overrides?: CallOverrides): Promise<string>;

    presaleHolders(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        totalPresaleAmount: BigNumber;
        remainingAmount: BigNumber;
        unlockDate: BigNumber;
      }
    >;

    presaleHoldersList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    presaleRounds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { rateUSDT: BigNumber; endTime: BigNumber }
    >;

    presaleStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    remainingAmount(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAmounts(
      _maxAmount: BigNumberish,
      _remainingAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidityLocker(
      _liquidityLocker: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPancakeSwapPositionManager(
      _positionManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    startPresale(
      _duration: BigNumberish,
      _pancakeSwapPairBNB: string,
      _pancakeSwapPairUSDT: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    symbol(overrides?: CallOverrides): Promise<string>;

    toDateTime(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    CHAINLINK_BNB_USDT(overrides?: CallOverrides): Promise<BigNumber>;

    START_JSCP_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    USDT_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    WBNB_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    addHolder(
      _holder: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    addLiquidity(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    allPresaleRoundsEnded(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    buyPresaleTokens(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    canPresaleHolderTransfer(
      _holder: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    currentRound(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getLatestBNBPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getPresaleRound(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    isPresaleActive(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    isPresaleHolder(
      _holder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    jesusCryptToken(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityLocker(overrides?: CallOverrides): Promise<BigNumber>;

    lockedBNB(overrides?: CallOverrides): Promise<BigNumber>;

    lockedUSDT(overrides?: CallOverrides): Promise<BigNumber>;

    maxAmount(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pancakeSwapPairBNB(overrides?: CallOverrides): Promise<BigNumber>;

    pancakeSwapPairUSDT(overrides?: CallOverrides): Promise<BigNumber>;

    positionManager(overrides?: CallOverrides): Promise<BigNumber>;

    presaleHolders(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    presaleHoldersList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    presaleRounds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    presaleStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    remainingAmount(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setAmounts(
      _maxAmount: BigNumberish,
      _remainingAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setLiquidityLocker(
      _liquidityLocker: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setPancakeSwapPositionManager(
      _positionManager: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    startPresale(
      _duration: BigNumberish,
      _pancakeSwapPairBNB: string,
      _pancakeSwapPairUSDT: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    toDateTime(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferFrom(
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CHAINLINK_BNB_USDT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    START_JSCP_PRICE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    USDT_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WBNB_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addHolder(
      _holder: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    addLiquidity(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    allPresaleRoundsEnded(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyPresaleTokens(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    canPresaleHolderTransfer(
      _holder: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    currentRound(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getLatestBNBPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPresaleRound(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isPresaleActive(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isPresaleHolder(
      _holder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    jesusCryptToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidityLocker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockedBNB(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockedUSDT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pancakeSwapPairBNB(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pancakeSwapPairUSDT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    positionManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    presaleHolders(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    presaleHoldersList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    presaleRounds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    presaleStartTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    remainingAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setAmounts(
      _maxAmount: BigNumberish,
      _remainingAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setLiquidityLocker(
      _liquidityLocker: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setPancakeSwapPositionManager(
      _positionManager: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    startPresale(
      _duration: BigNumberish,
      _pancakeSwapPairBNB: string,
      _pancakeSwapPairUSDT: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    toDateTime(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      _to: string,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
